// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  first_name       String?
  last_name        String?
  password         String?
  image            String?
  email            String?
  notification     Boolean?         @default(true)
  is_verified      Boolean          @default(false)
  gender           Gender?
  phone_number     Int              @unique
  dob              DateTime?
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  bearerToken      BearerToken?
  device_token     String?
  sapatiRequests   SapatiRequests[] @relation("requestedUser")
  requestedSapatis SapatiRequests[] @relation("requester")
}

model VerifyPhoneNumber {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  phone_number Int      @unique
  token        String   @unique
  expires      DateTime @unique
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model BearerToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id    String   @unique @db.ObjectId
  user       User     @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  token      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model SapatiRequests {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  amount            Int
  return_date       DateTime
  reason            String
  dcline_reason     String?
  change_reason     String?
  request_status    RequestStatus @default(PENDING)
  user_id           String        @db.ObjectId
  requested_user_id String        @db.ObjectId
  user              User          @relation("requester", fields: [user_id], references: [id])
  requested_user    User          @relation("requestedUser", fields: [requested_user_id], references: [id])
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
}
