// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  first_name        String?
  last_name         String?
  fullName          String?
  password          String?
  image             String?
  email             String?
  tokensNumber      Int?          @default(0)
  tokensCreatedDate DateTime?
  notification      Boolean?      @default(true)
  is_verified       Boolean       @default(false)
  gender            Gender?
  country_code      String?
  phone_number      Int           @unique
  dob               String?
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  bearerToken       BearerToken[]
  device_token      String?
  lendings          Lendings[]
  borrowings        Borrowings[]

  Notifications Notifications[]
}

model VerifyPhoneNumber {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  phone_number Int      @unique
  token        String   @unique
  expires      DateTime @unique
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model BearerToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id    String   @db.ObjectId
  user       User     @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  token      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum SapatiStatus {
  PENDING
  APPROVED
  DECLINED
  CHANGE
  CHANGED
  DUE
  SETTLED
}

enum SapatiType {
  LENDED
  BORROWED
}

model Sapati {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  fullName            String?
  role                String?
  image               String?
  phone               String
  amount              Int
  taken_date          DateTime
  return_date         DateTime
  decline_reason      String?
  change_reason       String?
  changed_remarks     String?
  changed_amount      Int?
  request_change_date DateTime?
  settled_date        DateTime?
  settled_by          String?
  settled_by_name     String?
  remarks             String?
  created_by          String?         @db.ObjectId
  created_for         String?         @db.ObjectId
  created_user_name   String?
  created_user_image  String?
  confirm_settlement  Boolean         @default(false)
  type                SapatiType
  sapati_satatus      SapatiStatus    @default(PENDING)
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  lendings            Lendings?
  borrowings          Borrowings?
  notifications       Notifications[]
}

model Lendings {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id    String   @db.ObjectId
  user       User     @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  sapati_id  String   @unique @db.ObjectId
  sapati     Sapati   @relation(fields: [sapati_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Borrowings {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id    String   @db.ObjectId
  user       User     @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  sapati_id  String   @unique @db.ObjectId
  sapati     Sapati   @relation(fields: [sapati_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum AdminRole {
  SUPERADMIN
  ADMIN
}

model Admin {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  full_name  String
  email      String    @unique
  role       AdminRole @default(ADMIN)
  password   String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

enum NotificationStatus {
  APPROVED
  REJECTED
  CHANGE
  REQUEST
  DUE
  SETTLED
}

enum DueType {
  GET
  PAY
}

model Notifications {
  id         String             @id @default(auto()) @map("_id") @db.ObjectId
  user_id    String             @db.ObjectId
  user       User               @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  sapati_id  String             @db.ObjectId
  sapati     Sapati             @relation(fields: [sapati_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  status     NotificationStatus
  due_type   DueType?
  created_at DateTime
  updated_at DateTime           @updatedAt
}
